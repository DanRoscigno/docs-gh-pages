"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[52886],{3905:function(e,t,a){a.d(t,{Zo:function(){return i},kt:function(){return k}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),o=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},i=function(e){var t=o(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,p=e.originalType,u=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),m=o(a),k=r,d=m["".concat(u,".").concat(k)]||m[k]||c[k]||p;return a?n.createElement(d,l(l({ref:t},i),{},{components:a})):n.createElement(d,l({ref:t},i))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=a.length,l=new Array(p);l[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<p;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},77793:function(e,t,a){a.r(t),a.d(t,{assets:function(){return i},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return c}});var n=a(87462),r=a(63366),p=(a(67294),a(3905)),l=["components"],s={sidebar_position:65,sidebar_label:"Map(key, value)"},u="Map(key, value)",o={unversionedId:"en/sql-reference/data-types/map",id:"en/sql-reference/data-types/map",title:"Map(key, value)",description:"Map(key, value) data type stores key:value pairs.",source:"@site/docs/en/sql-reference/data-types/map.md",sourceDirName:"en/sql-reference/data-types",slug:"/en/sql-reference/data-types/map",permalink:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/map",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/data-types/map.md",tags:[],version:"current",sidebarPosition:65,frontMatter:{sidebar_position:65,sidebar_label:"Map(key, value)"},sidebar:"english",previous:{title:"Geo",permalink:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/geo"},next:{title:"SimpleAggregateFunction",permalink:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/simpleaggregatefunction"}},i={},c=[{value:"Convert Tuple to Map Type",id:"convert-tuple-to-map-type",level:2},{value:"Map.keys and Map.values Subcolumns",id:"mapkeys-and-mapvalues-subcolumns",level:2}],m={toc:c};function k(e){var t=e.components,a=(0,r.Z)(e,l);return(0,p.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"mapkey-value"},"Map(key, value)"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"Map(key, value)")," data type stores ",(0,p.kt)("inlineCode",{parentName:"p"},"key:value")," pairs."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Parameters")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"key")," \u2014 The key part of the pair. ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/string"},"String"),", ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/int-uint"},"Integer"),", ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/lowcardinality"},"LowCardinality"),", ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/fixedstring"},"FixedString"),", ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/uuid"},"UUID"),", ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/date"},"Date"),", ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/datetime"},"DateTime"),", ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/date32"},"Date32"),", ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/enum"},"Enum"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"value")," \u2014 The value part of the pair. Arbitrary type, including ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/map"},"Map")," and ",(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/data-types/array"},"Array"),".")),(0,p.kt)("p",null,"To get the value from an ",(0,p.kt)("inlineCode",{parentName:"p"},"a Map('key', 'value')")," column, use ",(0,p.kt)("inlineCode",{parentName:"p"},"a['key']")," syntax. This lookup works now with a linear complexity."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Examples")),(0,p.kt)("p",null,"Consider the table:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE table_map (a Map(String, UInt64)) ENGINE=Memory;\nINSERT INTO table_map VALUES ({'key1':1, 'key2':10}), ({'key1':2,'key2':20}), ({'key1':3,'key2':30});\n")),(0,p.kt)("p",null,"Select all ",(0,p.kt)("inlineCode",{parentName:"p"},"key2")," values:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT a['key2'] FROM table_map;\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayElement(a, 'key2')\u2500\u2510\n\u2502                      10 \u2502\n\u2502                      20 \u2502\n\u2502                      30 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("p",null,"If there's no such ",(0,p.kt)("inlineCode",{parentName:"p"},"key")," in the ",(0,p.kt)("inlineCode",{parentName:"p"},"Map()")," column, the query returns zeros for numerical values, empty strings or empty arrays."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table_map VALUES ({'key3':100}), ({});\nSELECT a['key3'] FROM table_map;\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayElement(a, 'key3')\u2500\u2510\n\u2502                     100 \u2502\n\u2502                       0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500arrayElement(a, 'key3')\u2500\u2510\n\u2502                       0 \u2502\n\u2502                       0 \u2502\n\u2502                       0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"convert-tuple-to-map-type"},"Convert Tuple to Map Type"),(0,p.kt)("p",null,"You can cast ",(0,p.kt)("inlineCode",{parentName:"p"},"Tuple()")," as ",(0,p.kt)("inlineCode",{parentName:"p"},"Map()")," using ",(0,p.kt)("a",{parentName:"p",href:"/docs-gh-pages/update-quick-start/en/sql-reference/functions/type-conversion-functions#type_conversion_function-cast"},"CAST")," function:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CAST(([1, 2, 3], ['Ready', 'Steady', 'Go']), 'Map(UInt8, String)') AS map;\n")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500map\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 {1:'Ready',2:'Steady',3:'Go'} \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"mapkeys-and-mapvalues-subcolumns"},"Map.keys and Map.values Subcolumns"),(0,p.kt)("p",null,"To optimize ",(0,p.kt)("inlineCode",{parentName:"p"},"Map")," column processing, in some cases you can use the ",(0,p.kt)("inlineCode",{parentName:"p"},"keys")," and ",(0,p.kt)("inlineCode",{parentName:"p"},"values")," subcolumns instead of reading the whole column."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE t_map (`a` Map(String, UInt64)) ENGINE = Memory;\n\nINSERT INTO t_map VALUES (map('key1', 1, 'key2', 2, 'key3', 3));\n\nSELECT a.keys FROM t_map;\n\nSELECT a.values FROM t_map;\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500a.keys\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ['key1','key2','key3'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500a.values\u2500\u2510\n\u2502 [1,2,3]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"See Also")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/functions/tuple-map-functions#function-map"},"map()")," function"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"/docs-gh-pages/update-quick-start/en/sql-reference/functions/type-conversion-functions#type_conversion_function-cast"},"CAST()")," function")))}k.isMDXComponent=!0}}]);