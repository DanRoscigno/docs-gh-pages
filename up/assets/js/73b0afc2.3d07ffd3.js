"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[27585],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),p=s,h=u["".concat(l,".").concat(p)]||u[p]||m[p]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function p(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},43740:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return m}});var a=n(87462),s=n(63366),r=(n(67294),n(3905)),o=["components"],i={sidebar_label:"Snapshots",sidebar_position:7,description:"Snapshot tables with dbt and ClickHouse"},l="Creating a Snapshot",c={unversionedId:"en/integrations/dbt/dbt-snapshot",id:"en/integrations/dbt/dbt-snapshot",title:"Creating a Snapshot",description:"Snapshot tables with dbt and ClickHouse",source:"@site/docs/en/integrations/dbt/dbt-snapshot.md",sourceDirName:"en/integrations/dbt",slug:"/en/integrations/dbt/dbt-snapshot",permalink:"/docs-gh-pages/up/en/integrations/dbt/dbt-snapshot",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/dbt/dbt-snapshot.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_label:"Snapshots",sidebar_position:7,description:"Snapshot tables with dbt and ClickHouse"},sidebar:"english",previous:{title:"Incremental Materializations",permalink:"/docs-gh-pages/up/en/integrations/dbt/dbt-incremental-model"},next:{title:"Seeds",permalink:"/docs-gh-pages/up/en/integrations/dbt/dbt-seeds"}},d={},m=[],u={toc:m};function p(e){var t=e.components,n=(0,s.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-a-snapshot"},"Creating a Snapshot"),(0,r.kt)("p",null,"dbt snapshots allow a record to be made of changes to a mutable model over time. This in turn allows point-in-time queries on models, where analysts can \u201clook back in time\u201d at the previous state of a model. This is achieved using ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Slowly_changing_dimension#Type_2:_add_new_row"},"type-2 Slowly Changing Dimensions")," where from and to date columns record when a row was valid. This functionality is supported by the ClickHouse plugin and is demonstrated below."),(0,r.kt)("p",null,"This example assumes you have completed ",(0,r.kt)("a",{parentName:"p",href:"./dbt-incremental-model"},"Creating an Incremental Table Model"),". Make sure your actor_summary.sql doesn't set inserts_only=True. Your models/actor_summary.sql should look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"{{ config(order_by='(updated_at, id, name)', engine='MergeTree()', materialized='incremental', unique_key='id') }}\n\nwith actor_summary as (\n    SELECT id,\n        any(actor_name) as name,\n        uniqExact(movie_id)    as num_movies,\n        avg(rank)                as avg_rank,\n        uniqExact(genre)         as genres,\n        uniqExact(director_name) as directors,\n        max(created_at) as updated_at\n    FROM (\n        SELECT {{ source('imdb', 'actors') }}.id as id,\n            concat({{ source('imdb', 'actors') }}.first_name, ' ', {{ source('imdb', 'actors') }}.last_name) as actor_name,\n            {{ source('imdb', 'movies') }}.id as movie_id,\n            {{ source('imdb', 'movies') }}.rank as rank,\n            genre,\n            concat({{ source('imdb', 'directors') }}.first_name, ' ', {{ source('imdb', 'directors') }}.last_name) as director_name,\n            created_at\n    FROM {{ source('imdb', 'actors') }}\n        JOIN {{ source('imdb', 'roles') }} ON {{ source('imdb', 'roles') }}.actor_id = {{ source('imdb', 'actors') }}.id\n        LEFT OUTER JOIN {{ source('imdb', 'movies') }} ON {{ source('imdb', 'movies') }}.id = {{ source('imdb', 'roles') }}.movie_id\n        LEFT OUTER JOIN {{ source('imdb', 'genres') }} ON {{ source('imdb', 'genres') }}.movie_id = {{ source('imdb', 'movies') }}.id\n        LEFT OUTER JOIN {{ source('imdb', 'movie_directors') }} ON {{ source('imdb', 'movie_directors') }}.movie_id = {{ source('imdb', 'movies') }}.id\n        LEFT OUTER JOIN {{ source('imdb', 'directors') }} ON {{ source('imdb', 'directors') }}.id = {{ source('imdb', 'movie_directors') }}.director_id\n    )\n    GROUP BY id\n)\nselect *\nfrom actor_summary\n\n{% if is_incremental() %}\n \n-- this filter will only be applied on an incremental run\nwhere id > (select max(id) from {{ this }}) or updated_at > (select max(updated_at) from {{this}})\n\n{% endif %}\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a file ",(0,r.kt)("inlineCode",{parentName:"p"},"actor_summary")," in the snapshots directory."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," touch snapshots/actor_summary.sql\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Update the contents of the actor_summary.sql file with the following content:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"{% snapshot actor_summary_snapshot %}\n\n{{\nconfig(\ntarget_schema='snapshots',\nunique_key='id',\nstrategy='timestamp',\nupdated_at='updated_at',\n)\n}}\n\nselect * from {{ref('actor_summary')}}\n\n{% endsnapshot %}\n")))),(0,r.kt)("p",null,"A few observations regarding this content:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The select query defines the results you wish to snapshot over time. The function ref is used to reference our previously created actor_summary model."),(0,r.kt)("li",{parentName:"ul"},"We require a timestamp column to indicate record changes. Our updated_at column (see ",(0,r.kt)("a",{parentName:"li",href:"./dbt-incremental-model"},"Creating an Incremental Table Model"),") can be used here. The parameter strategy indicates our use of a timestamp to denote updates, with the parameter updated_at specifying the column to use. If this is not present in your model you can alternatively use the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/docs/building-a-dbt-project/snapshots#check-strategy"},"check strategy"),". This is significantly more inefficient and requires the user to specify a list of columns to compare.  dbt compares the current and historical values of these columns, recording any changes (or doing nothing if identical).")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the command ",(0,r.kt)("inlineCode",{parentName:"p"},"dbt snapshot"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"clickhouse-user@clickhouse:~/imdb$ dbt snapshot\n13:26:23  Running with dbt=1.1.0\n13:26:23  Found 1 model, 0 tests, 1 snapshot, 0 analyses, 181 macros, 0 operations, 0 seed files, 3 sources, 0 exposures, 0 metrics\n13:26:23  \n13:26:25  Concurrency: 1 threads (target='dev')\n13:26:25  \n13:26:25  1 of 1 START snapshot snapshots.actor_summary_snapshot...................... [RUN]\n13:26:25  1 of 1 OK snapshotted snapshots.actor_summary_snapshot...................... [OK in 0.79s]\n13:26:25  \n13:26:25  Finished running 1 snapshot in 2.11s.\n13:26:25  \n13:26:25  Completed successfully\n13:26:25  \n13:26:25  Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1\n")))),(0,r.kt)("p",null,"Note how a table actor_summary_snapshot has been created in the snapshots db (determined by the target_schema parameter)."),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Sampling this data you will see how dbt has included the columns dbt_valid_from and dbt_valid_to. The latter has values set to null. Subsequent runs will update this."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, name, num_movies, dbt_valid_from, dbt_valid_to FROM snapshots.actor_summary_snapshot ORDER BY num_movies DESC LIMIT 5;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"+------+----------+------------+----------+-------------------+------------+\n|id    |first_name|last_name   |num_movies|dbt_valid_from     |dbt_valid_to|\n+------+----------+------------+----------+-------------------+------------+\n|845467|Danny     |DeBito      |920       |2022-05-25 19:33:32|NULL        |\n|845466|Clicky    |McClickHouse|910       |2022-05-25 19:32:34|NULL        |\n|45332 |Mel       |Blanc       |909       |2022-05-25 19:31:47|NULL        |\n|621468|Bess      |Flowers     |672       |2022-05-25 19:31:47|NULL        |\n|283127|Tom       |London      |549       |2022-05-25 19:31:47|NULL        |\n+------+----------+------------+----------+-------------------+------------+\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Make our favorite actor Clicky McClickHouse appear in another 10 films."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO imdb.roles\nSELECT now() as created_at, 845466 as actor_id, rand(number) % 412320 as movie_id, 'Himself' as role\nFROM system.numbers\nLIMIT 10;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Re-run the dbt run command from the imdb directory. This will update the incremental model. Once this is complete, run the dbt snapshot to capture the changes."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"clickhouse-user@clickhouse:~/imdb$ dbt run\n13:46:14  Running with dbt=1.1.0\n13:46:14  Found 1 model, 0 tests, 1 snapshot, 0 analyses, 181 macros, 0 operations, 0 seed files, 3 sources, 0 exposures, 0 metrics\n13:46:14  \n13:46:15  Concurrency: 1 threads (target='dev')\n13:46:15  \n13:46:15  1 of 1 START incremental model imdb_dbt.actor_summary....................... [RUN]\n13:46:18  1 of 1 OK created incremental model imdb_dbt.actor_summary.................. [OK in 2.76s]\n13:46:18  \n13:46:18  Finished running 1 incremental model in 3.73s.\n13:46:18  \n13:46:18  Completed successfully\n13:46:18  \n13:46:18  Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1\n\nclickhouse-user@clickhouse:~/imdb$ dbt snapshot\n13:46:26  Running with dbt=1.1.0\n13:46:26  Found 1 model, 0 tests, 1 snapshot, 0 analyses, 181 macros, 0 operations, 0 seed files, 3 sources, 0 exposures, 0 metrics\n13:46:26  \n13:46:27  Concurrency: 1 threads (target='dev')\n13:46:27  \n13:46:27  1 of 1 START snapshot snapshots.actor_summary_snapshot...................... [RUN]\n13:46:31  1 of 1 OK snapshotted snapshots.actor_summary_snapshot...................... [OK in 4.05s]\n13:46:31  \n13:46:31  Finished running 1 snapshot in 5.02s.\n13:46:31  \n13:46:31  Completed successfully\n13:46:31  \n13:46:31  Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If we now query our snapshot, notice we have 2 rows for Clicky McClickHouse. Our previous entry now has a dbt_valid_to value. Our new value is recorded with the same value in the dbt_valid_from column, and a dbt_valid_to value of null. If we did have new rows, these would also be appended to the snapshot."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, name, num_movies, dbt_valid_from, dbt_valid_to FROM snapshots.actor_summary_snapshot ORDER BY num_movies DESC LIMIT 5;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"+------+----------+------------+----------+-------------------+-------------------+\n|id    |first_name|last_name   |num_movies|dbt_valid_from     |dbt_valid_to       |\n+------+----------+------------+----------+-------------------+-------------------+\n|845467|Danny     |DeBito      |920       |2022-05-25 19:33:32|NULL               |\n|845466|Clicky    |McClickHouse|920       |2022-05-25 19:34:37|NULL               |\n|845466|Clicky    |McClickHouse|910       |2022-05-25 19:32:34|2022-05-25 19:34:37|\n|45332 |Mel       |Blanc       |909       |2022-05-25 19:31:47|NULL               |\n|621468|Bess      |Flowers     |672       |2022-05-25 19:31:47|NULL               |\n+------+----------+------------+----------+-------------------+-------------------+\n")))),(0,r.kt)("p",null,"For further details on dbt snapshots see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.getdbt.com/docs/building-a-dbt-project/snapshots"},"here"),"."))}p.isMDXComponent=!0}}]);